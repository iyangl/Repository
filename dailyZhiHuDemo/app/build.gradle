apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'

def keyStorePropertiesFile = rootProject.file("keystore.properties")
def keyStoreProperties = new Properties()
keyStoreProperties.load(new FileInputStream(keyStorePropertiesFile))

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.3"

    signingConfigs {
        releaseConfig {
            storeFile file(keyStoreProperties['storeFile'])
            keyAlias keyStoreProperties['keyAlias']
            keyPassword keyStoreProperties['keyPassword']
            storePassword keyStoreProperties['storePassword']
        }
    }

    dataBinding {
        enabled true
    }

    defaultConfig {
        applicationId "com.ly.example.myapplication2"
        minSdkVersion 15
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        ndk {
            // 设置支持的SO库架构
            abiFilters 'armeabi' //, 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.releaseConfig
        }
    }
    applicationVariants.all {
        variant ->
            variant.outputs.each { output ->
                def outputFile = output.outputFile
                if (outputFile != null && outputFile.name.endsWith('.apk')) {
                    if (variant.buildType.name == 'release') {
                        def fileName = "DailyZhiHu${releaseTime()}_v${defaultConfig.versionName}_vc${defaultConfig.versionCode}.apk"
                        //控制输出的APK的存放路径
                        if (project.hasProperty('OUT_PUT_DIR_PARA')) {
                            File output_dir1 = file("${OUT_PUT_DIR_PARA}");
                            output.outputFile = new File(output_dir1, fileName)
                        } else {
                            output.outputFile = new File(outputFile.parent, fileName)
                        }
                    } else if (variant.buildType.name == 'debug'){
                        def fileName = "DailyZhiHu${releaseTime()}_v${defaultConfig.versionName}_vc${defaultConfig.versionCode}_debug.apk"
                        output.outputFile = new File(outputFile.parent, fileName)
                    }
                }
            }
    }

    //ADD THESE LINES:
    packagingOptions {
        exclude 'LICENSE.txt'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

allprojects {
    repositories {
        maven { url "https://jitpack.io" }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:25.3.1'
    compile 'com.android.support:design:25.3.1'
    testCompile 'junit:junit:4.12'
    //Gson
    compile 'com.google.code.gson:gson:2.8.0'
    //Glide
    compile 'com.github.bumptech.glide:glide:3.7.0'
    //Rxjava
    compile 'io.reactivex:rxjava:1.2.7'
    compile 'io.reactivex:rxandroid:1.0.1'
    //Retrofit
    compile 'com.squareup.retrofit2:retrofit:2.2.0'
    compile 'com.squareup.retrofit2:converter-gson:2.1.0'
    compile 'com.squareup.retrofit2:adapter-rxjava:2.1.0'
    //Okhttp Logging
    compile 'com.squareup.okhttp3:logging-interceptor:3.6.0'
    //Timber
    compile 'com.jakewharton.timber:timber:4.5.1'
    //convenientbanner
    compile 'com.bigkoo:convenientbanner:2.0.5'
    //leakCanary
    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.5.1'
    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.1'
    testCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.1'
    //dialog
    compile 'com.github.hss01248:DialogUtil:1.1.5'
    //rxCache
    compile 'com.github.VictorAlbertos.RxCache:runtime:1.7.0-1.x'
    //Jolyglot To use Gson use with rxCache
    compile 'com.github.VictorAlbertos.Jolyglot:gson:0.0.3'
    //mockito
    testCompile 'org.mockito:mockito-core:2.8.47'
    //dagger2
    compile 'com.google.dagger:dagger:2.7'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.7'
    //RxPermissions
    compile 'com.tbruyelle.rxpermissions:rxpermissions:0.9.4@aar'
    //Android-skin-support
    compile 'skin.support:skin-support:2.0.3'

    compile 'com.tencent.bugly:crashreport:2.1.9' //其中latest.release指代最新Bugly SDK版本号，也可以指定明确的版本号，例如2.1.9
    compile 'com.tencent.bugly:nativecrashreport:3.0' //其中latest.release指代最新Bugly NDK版本号，也可以指定明确的版本号，例如3.0
}

// 定义一个打包时间
static def releaseTime() {
    return new Date().format("yyMMddHHmm", TimeZone.getTimeZone("Asia/Shanghai"))
}